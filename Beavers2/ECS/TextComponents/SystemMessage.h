#pragma once
#include <iostream>
#include "ECS.h"
#include "FontSheet.h"
#include "UIElement.h"

//
// јлгоритм примерно такой: 
// 1. —оздаем шрифт-лист из N букв и символов
//	1.1. Ўирина окна под каждую букву фиксирована. 
//	1.2. ¬се буквы строчные, ибо € рот ебал. Ѕуквы "с хвостиком" изначально чуть опущены. 
// 2. ѕользу€сь ƒимкиным способом при помощи шейдера получаем некие пр€моугольники с буквами внутри. 
//	2.1. ѕри помощи шейдера нужно как-то вырезать из большого изображени€ маленькое (w на h), получив координаты вершин пр€моугольника путем
//			делени€ с остатком.  
//	2.2. Ёти пр€моугольники нужно в соответствии со строкой разместить в карту/словарь, поставив в соответствие некий индекс или char.
//	2.3. јдресуемс€ через карту, использу€ в качестве адресов символы строки сообщени€.
// 3. –азмещаем пр€моугольник в указанной позиции на экране, после чего размещаем следующий на позиции с x+a абсциссами, где a - ширина буквы
//	3.1. ѕредположительно, вырезанную шейдером букву передаем OpenGL как текстуру дл€ полигона общегно вида
//			h - высота буквы
//			w - ширина буквы
//			sx - позици€ буквы в строке по горизонтали
//			sy - номер строки
//			[w*(sx-1), h*sy,     0, 0,
//			 w*(sx),   h*sy,     1, 0,
//			 w*(sx),   h*(sy-1), 1, 1, 
//			 w*(sx-1), h*(sy-1), 0, 1]
//	3.2.  расить буквы можно все тем же шейдером, главное только разобратьс€, как в пределах одной строки покрасить разные слова в разные
//			цвета. ѕрикрутим к тексту анимацию - плюсик в карму, но за байт у "катаны зеро" могут и на ротан дать, так что тут осторожно.
class SystemMessage : public UIElement
{
private:
	std::string message;

	IndexBuffer* ib;
	VertexBuffer* vb;
	VertexArray* va;
	Shader* shader;
	Texture* texture;
	float vertices[4 * 4] = {
	 -1.0f, -1.0f, 0.0f, 0.0f,
	  1.0f, -1.0f, 1.0f, 0.0f,
	  1.0f,  1.0f, 1.0f, 1.0f,
	 -1.0f,  1.0f, 0.0f, 1.0f
	};

	unsigned int indexes[6] = {
		0, 1, 2,
		2, 3, 0
	};

public: 
	SystemMessage(std::string cur_message, const char* pathTexture);
	void draw() override;
	void init() override;
};